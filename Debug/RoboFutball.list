
RoboFutball.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004474  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004624  08004624  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800462c  0800462c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004630  08004630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004634  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  08004640  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004640  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa79  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  00015ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00017990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  000188c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e1f  00000000  00000000  000194d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bcd  00000000  00000000  0002f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfe7  00000000  00000000  00040ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdeac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004170  00000000  00000000  000cdef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d2060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080045f4 	.word	0x080045f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080045f4 	.word	0x080045f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fe7c 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f812 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fafa 	bl	8000acc <MX_GPIO_Init>
  MX_TIM1_Init();
 80004d8:	f000 f8a4 	bl	8000624 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004dc:	f000 f94a 	bl	8000774 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e0:	f000 f99c 	bl	800081c <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e4:	f000 f9ee 	bl	80008c4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e8:	f000 fa40 	bl	800096c <MX_TIM5_Init>
  MX_I2C1_Init();
 80004ec:	f000 f86c 	bl	80005c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 fac2 	bl	8000a78 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <main+0x2c>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f848 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a26      	ldr	r2, [pc, #152]	@ (80005c0 <SystemClock_Config+0xc8>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000542:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800056c:	2360      	movs	r3, #96	@ 0x60
 800056e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fb1b 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 fb16 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2103      	movs	r1, #3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fd7d 	bl	80020a8 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b4:	f000 fb00 	bl	8000bb8 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	@ 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	@ (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f001 f993 	bl	8001930 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fad2 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b092      	sub	sp, #72	@ 0x48
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 ffa4 	bl	800459c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000654:	4b45      	ldr	r3, [pc, #276]	@ (800076c <MX_TIM1_Init+0x148>)
 8000656:	4a46      	ldr	r2, [pc, #280]	@ (8000770 <MX_TIM1_Init+0x14c>)
 8000658:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 94;
 800065a:	4b44      	ldr	r3, [pc, #272]	@ (800076c <MX_TIM1_Init+0x148>)
 800065c:	225e      	movs	r2, #94	@ 0x5e
 800065e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b42      	ldr	r3, [pc, #264]	@ (800076c <MX_TIM1_Init+0x148>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8000666:	4b41      	ldr	r3, [pc, #260]	@ (800076c <MX_TIM1_Init+0x148>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b3f      	ldr	r3, [pc, #252]	@ (800076c <MX_TIM1_Init+0x148>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <MX_TIM1_Init+0x148>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067a:	4b3c      	ldr	r3, [pc, #240]	@ (800076c <MX_TIM1_Init+0x148>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000680:	483a      	ldr	r0, [pc, #232]	@ (800076c <MX_TIM1_Init+0x148>)
 8000682:	f001 ff40 	bl	8002506 <HAL_TIM_PWM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800068c:	f000 fa94 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800069c:	4619      	mov	r1, r3
 800069e:	4833      	ldr	r0, [pc, #204]	@ (800076c <MX_TIM1_Init+0x148>)
 80006a0:	f002 ff8a 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006aa:	f000 fa85 	bl	8000bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ae:	2360      	movs	r3, #96	@ 0x60
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4826      	ldr	r0, [pc, #152]	@ (800076c <MX_TIM1_Init+0x148>)
 80006d4:	f002 f9f2 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006de:	f000 fa6b 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	2204      	movs	r2, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4820      	ldr	r0, [pc, #128]	@ (800076c <MX_TIM1_Init+0x148>)
 80006ec:	f002 f9e6 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006f6:	f000 fa5f 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2208      	movs	r2, #8
 8000700:	4619      	mov	r1, r3
 8000702:	481a      	ldr	r0, [pc, #104]	@ (800076c <MX_TIM1_Init+0x148>)
 8000704:	f002 f9da 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800070e:	f000 fa53 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	220c      	movs	r2, #12
 8000718:	4619      	mov	r1, r3
 800071a:	4814      	ldr	r0, [pc, #80]	@ (800076c <MX_TIM1_Init+0x148>)
 800071c:	f002 f9ce 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000726:	f000 fa47 	bl	8000bb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800073e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000742:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4807      	ldr	r0, [pc, #28]	@ (800076c <MX_TIM1_Init+0x148>)
 800074e:	f002 ffa1 	bl	8003694 <HAL_TIMEx_ConfigBreakDeadTime>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000758:	f000 fa2e 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <MX_TIM1_Init+0x148>)
 800075e:	f000 fbe1 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3748      	adds	r7, #72	@ 0x48
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000007c 	.word	0x2000007c
 8000770:	40010000 	.word	0x40010000

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2224      	movs	r2, #36	@ 0x24
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f003 ff0a 	bl	800459c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_TIM2_Init+0xa4>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_TIM2_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_TIM2_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_TIM2_Init+0xa4>)
 80007a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_TIM2_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_TIM2_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007d0:	2301      	movs	r3, #1
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_TIM2_Init+0xa4>)
 80007e4:	f001 ff37 	bl	8002656 <HAL_TIM_Encoder_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ee:	f000 f9e3 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	@ (8000818 <MX_TIM2_Init+0xa4>)
 8000800:	f002 feda 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800080a:	f000 f9d5 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	@ 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000c4 	.word	0x200000c4

0800081c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	@ 0x30
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2224      	movs	r2, #36	@ 0x24
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 feb6 	bl	800459c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800083a:	4a21      	ldr	r2, [pc, #132]	@ (80008c0 <MX_TIM3_Init+0xa4>)
 800083c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800084c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800085e:	2301      	movs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000876:	2301      	movs	r3, #1
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800088a:	f001 fee4 	bl	8002656 <HAL_TIM_Encoder_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000894:	f000 f990 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_TIM3_Init+0xa0>)
 80008a6:	f002 fe87 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008b0:	f000 f982 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3730      	adds	r7, #48	@ 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2224      	movs	r2, #36	@ 0x24
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fe62 	bl	800459c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008e0:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_TIM4_Init+0xa0>)
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <MX_TIM4_Init+0xa4>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_TIM4_Init+0xa0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_TIM4_Init+0xa0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_TIM4_Init+0xa0>)
 80008f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM4_Init+0xa0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM4_Init+0xa0>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800090e:	2301      	movs	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800091e:	2301      	movs	r3, #1
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_TIM4_Init+0xa0>)
 8000932:	f001 fe90 	bl	8002656 <HAL_TIM_Encoder_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 f93c 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_TIM4_Init+0xa0>)
 800094e:	f002 fe33 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000958:	f000 f92e 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	@ 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000154 	.word	0x20000154
 8000968:	40000800 	.word	0x40000800

0800096c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000998:	4b35      	ldr	r3, [pc, #212]	@ (8000a70 <MX_TIM5_Init+0x104>)
 800099a:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <MX_TIM5_Init+0x108>)
 800099c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 97;
 800099e:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009a0:	2261      	movs	r2, #97	@ 0x61
 80009a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009be:	482c      	ldr	r0, [pc, #176]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009c0:	f001 fd52 	bl	8002468 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80009ca:	f000 f8f5 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80009ce:	4828      	ldr	r0, [pc, #160]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009d0:	f001 fde8 	bl	80025a4 <HAL_TIM_IC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80009da:	f000 f8ed 	bl	8000bb8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009de:	2304      	movs	r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009e2:	2350      	movs	r3, #80	@ 0x50
 80009e4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009e6:	2302      	movs	r3, #2
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481e      	ldr	r0, [pc, #120]	@ (8000a70 <MX_TIM5_Init+0x104>)
 80009f6:	f002 f923 	bl	8002c40 <HAL_TIM_SlaveConfigSynchro>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000a00:	f000 f8da 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4817      	ldr	r0, [pc, #92]	@ (8000a70 <MX_TIM5_Init+0x104>)
 8000a14:	f002 fdd0 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8000a1e:	f000 f8cb 	bl	8000bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a22:	2302      	movs	r3, #2
 8000a24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a26:	2301      	movs	r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_TIM5_Init+0x104>)
 8000a3a:	f001 ffa2 	bl	8002982 <HAL_TIM_IC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a44:	f000 f8b8 	bl	8000bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_TIM5_Init+0x104>)
 8000a58:	f001 ff93 	bl	8002982 <HAL_TIM_IC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM5_Init+0xfa>
  {
    Error_Handler();
 8000a62:	f000 f8a9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	@ 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000019c 	.word	0x2000019c
 8000a74:	40000c00 	.word	0x40000c00

08000a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <MX_USART1_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f002 fe56 	bl	8003760 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f87d 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001e4 	.word	0x200001e4
 8000ac8:	40011000 	.word	0x40011000

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a30      	ldr	r2, [pc, #192]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3c:	481c      	ldr	r0, [pc, #112]	@ (8000bb0 <MX_GPIO_Init+0xe4>)
 8000b3e:	f000 fedd 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN8_Pin|IN7_Pin|IN6_Pin|IN5_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	f24f 4107 	movw	r1, #62471	@ 0xf407
 8000b48:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b4a:	f000 fed7 	bl	80018fc <HAL_GPIO_WritePin>
                          |IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <MX_GPIO_Init+0xe4>)
 8000b68:	f000 fd44 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Chanal_Pin */
  GPIO_InitStruct.Pin = Chanal_Pin;
 8000b6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Chanal_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <MX_GPIO_Init+0xe4>)
 8000b82:	f000 fd37 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN8_Pin IN7_Pin IN6_Pin IN5_Pin
                           IN4_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN8_Pin|IN7_Pin|IN6_Pin|IN5_Pin
 8000b86:	f24f 4307 	movw	r3, #62471	@ 0xf407
 8000b8a:	60fb      	str	r3, [r7, #12]
                          |IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_GPIO_Init+0xe8>)
 8000ba0:	f000 fd28 	bl	80015f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <Error_Handler+0x8>

08000bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_I2C_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c64:	2304      	movs	r3, #4
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <HAL_I2C_MspInit+0x8c>)
 8000c70:	f000 fcc0 	bl	80015f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	@ 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_TIM_PWM_MspInit+0x48>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d115      	bne.n	8000ce2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2018      	movs	r0, #24
 8000cd8:	f000 fbc3 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cdc:	2018      	movs	r0, #24
 8000cde:	f000 fbdc 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	@ 0x38
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d134      	bne.n	8000d80 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	4b55      	ldr	r3, [pc, #340]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a54      	ldr	r2, [pc, #336]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b52      	ldr	r3, [pc, #328]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	4b4e      	ldr	r3, [pc, #312]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b4b      	ldr	r3, [pc, #300]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000d4e:	2322      	movs	r3, #34	@ 0x22
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4842      	ldr	r0, [pc, #264]	@ (8000e74 <HAL_TIM_Encoder_MspInit+0x180>)
 8000d6a:	f000 fc43 	bl	80015f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	201c      	movs	r0, #28
 8000d74:	f000 fb75 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f000 fb8e 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d7e:	e072      	b.n	8000e66 <HAL_TIM_Encoder_MspInit+0x172>
  else if(htim_encoder->Instance==TIM3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a3c      	ldr	r2, [pc, #240]	@ (8000e78 <HAL_TIM_Encoder_MspInit+0x184>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d134      	bne.n	8000df4 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a37      	ldr	r2, [pc, #220]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a30      	ldr	r2, [pc, #192]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc2:	23c0      	movs	r3, #192	@ 0xc0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4825      	ldr	r0, [pc, #148]	@ (8000e74 <HAL_TIM_Encoder_MspInit+0x180>)
 8000dde:	f000 fc09 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201d      	movs	r0, #29
 8000de8:	f000 fb3b 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dec:	201d      	movs	r0, #29
 8000dee:	f000 fb54 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000df2:	e038      	b.n	8000e66 <HAL_TIM_Encoder_MspInit+0x172>
  else if(htim_encoder->Instance==TIM4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <HAL_TIM_Encoder_MspInit+0x188>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d133      	bne.n	8000e66 <HAL_TIM_Encoder_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a1a      	ldr	r2, [pc, #104]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23c0      	movs	r3, #192	@ 0xc0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e52:	f000 fbcf 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	201e      	movs	r0, #30
 8000e5c:	f000 fb01 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e60:	201e      	movs	r0, #30
 8000e62:	f000 fb1a 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	@ 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	40000800 	.word	0x40000800
 8000e80:	40020400 	.word	0x40020400

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f18 <HAL_TIM_Base_MspInit+0x94>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d133      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_TIM_Base_MspInit+0x98>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <HAL_TIM_Base_MspInit+0x9c>)
 8000efa:	f000 fb7b 	bl	80015f4 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2032      	movs	r0, #50	@ 0x32
 8000f04:	f000 faad 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f08:	2032      	movs	r0, #50	@ 0x32
 8000f0a:	f000 fac6 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40000c00 	.word	0x40000c00
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_TIM_MspPostInit+0x68>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11e      	bne.n	8000f84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <HAL_TIM_MspPostInit+0x70>)
 8000f80:	f000 fb38 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001068 <HAL_UART_MspInit+0xd0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d152      	bne.n	8001060 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_UART_MspInit+0xd4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800100e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001020:	2307      	movs	r3, #7
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <HAL_UART_MspInit+0xd8>)
 800102c:	f000 fae2 	bl	80015f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001030:	2308      	movs	r3, #8
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <HAL_UART_MspInit+0xdc>)
 800104c:	f000 fad2 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2025      	movs	r0, #37	@ 0x25
 8001056:	f000 fa04 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800105a:	2025      	movs	r0, #37	@ 0x25
 800105c:	f000 fa1d 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	@ 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <NMI_Handler+0x4>

08001080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <MemManage_Handler+0x4>

08001090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <UsageFault_Handler+0x4>

080010a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 f8cd 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010de:	f001 fb60 	bl	80027a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000007c 	.word	0x2000007c

080010ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM2_IRQHandler+0x10>)
 80010f2:	f001 fb56 	bl	80027a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000c4 	.word	0x200000c4

08001100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM3_IRQHandler+0x10>)
 8001106:	f001 fb4c 	bl	80027a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000010c 	.word	0x2000010c

08001114 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <TIM4_IRQHandler+0x10>)
 800111a:	f001 fb42 	bl	80027a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000154 	.word	0x20000154

08001128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f002 fb67 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001e4 	.word	0x200001e4

0800113c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM5_IRQHandler+0x10>)
 8001142:	f001 fb2e 	bl	80027a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000019c 	.word	0x2000019c

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001178:	f7ff ffea 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	@ (80011c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f003 fa03 	bl	80045ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff f98f 	bl	80004c8 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08004634 	.word	0x08004634
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	20000230 	.word	0x20000230

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f92b 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fce2 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f943 	bl	80014b6 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f90b 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	@ (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	2000022c 	.word	0x2000022c

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000022c 	.word	0x2000022c

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff feda 	bl	8001294 <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2280      	movs	r2, #128	@ 0x80
 80014f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e052      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0216 	bic.w	r2, r2, #22
 800150e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800151e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_DMA_Abort+0x62>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e013      	b.n	800157a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fe9f 	bl	8001294 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d90c      	bls.n	800157a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e015      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158c:	223f      	movs	r2, #63	@ 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2280      	movs	r2, #128	@ 0x80
 80015c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00c      	b.n	80015e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e159      	b.n	80018c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8148 	bne.w	80018be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a2 	beq.w	80018be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b57      	ldr	r3, [pc, #348]	@ (80018dc <HAL_GPIO_Init+0x2e8>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a56      	ldr	r2, [pc, #344]	@ (80018dc <HAL_GPIO_Init+0x2e8>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b54      	ldr	r3, [pc, #336]	@ (80018dc <HAL_GPIO_Init+0x2e8>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_GPIO_Init+0x2ec>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a49      	ldr	r2, [pc, #292]	@ (80018e4 <HAL_GPIO_Init+0x2f0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x202>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a48      	ldr	r2, [pc, #288]	@ (80018e8 <HAL_GPIO_Init+0x2f4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x1fe>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a47      	ldr	r2, [pc, #284]	@ (80018ec <HAL_GPIO_Init+0x2f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x1fa>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a46      	ldr	r2, [pc, #280]	@ (80018f0 <HAL_GPIO_Init+0x2fc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x1f6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a45      	ldr	r2, [pc, #276]	@ (80018f4 <HAL_GPIO_Init+0x300>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x1f2>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	@ (80018e0 <HAL_GPIO_Init+0x2ec>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a24      	ldr	r2, [pc, #144]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188e:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b8:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f aea2 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001918:	e003      	b.n	8001922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	619a      	str	r2, [r3, #24]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e12b      	b.n	8001b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff f95c 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	@ 0x24
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001994:	f000 fd40 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8001998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a81      	ldr	r2, [pc, #516]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d807      	bhi.n	80019b4 <HAL_I2C_Init+0x84>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a80      	ldr	r2, [pc, #512]	@ (8001ba8 <HAL_I2C_Init+0x278>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bf94      	ite	ls
 80019ac:	2301      	movls	r3, #1
 80019ae:	2300      	movhi	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e006      	b.n	80019c2 <HAL_I2C_Init+0x92>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bac <HAL_I2C_Init+0x27c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0e7      	b.n	8001b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a78      	ldr	r2, [pc, #480]	@ (8001bb0 <HAL_I2C_Init+0x280>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d802      	bhi.n	8001a04 <HAL_I2C_Init+0xd4>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3301      	adds	r3, #1
 8001a02:	e009      	b.n	8001a18 <HAL_I2C_Init+0xe8>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	4a69      	ldr	r2, [pc, #420]	@ (8001bb4 <HAL_I2C_Init+0x284>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	495c      	ldr	r1, [pc, #368]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d819      	bhi.n	8001a6c <HAL_I2C_Init+0x13c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e59      	subs	r1, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a46:	1c59      	adds	r1, r3, #1
 8001a48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_I2C_Init+0x138>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1e59      	subs	r1, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a66:	e051      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e04f      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d111      	bne.n	8001a98 <HAL_I2C_Init+0x168>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	440b      	add	r3, r1
 8001a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e012      	b.n	8001abe <HAL_I2C_Init+0x18e>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1e58      	subs	r0, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	0099      	lsls	r1, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x196>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e022      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10e      	bne.n	8001aec <HAL_I2C_Init+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e58      	subs	r0, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aea:	e00f      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	6809      	ldr	r1, [r1, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6911      	ldr	r1, [r2, #16]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68d2      	ldr	r2, [r2, #12]
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	000186a0 	.word	0x000186a0
 8001ba8:	001e847f 	.word	0x001e847f
 8001bac:	003d08ff 	.word	0x003d08ff
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e267      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d075      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd6:	4b88      	ldr	r3, [pc, #544]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b85      	ldr	r3, [pc, #532]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b82      	ldr	r3, [pc, #520]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d157      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e242      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x74>
 8001c1e:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a75      	ldr	r2, [pc, #468]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b70      	ldr	r3, [pc, #448]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6c      	ldr	r2, [pc, #432]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c50:	4b69      	ldr	r3, [pc, #420]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a68      	ldr	r2, [pc, #416]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a65      	ldr	r2, [pc, #404]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fb10 	bl	8001294 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fb0c 	bl	8001294 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e207      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xc0>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fafc 	bl	8001294 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff faf8 	bl	8001294 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1f3      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xe8>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cce:	4b4a      	ldr	r3, [pc, #296]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c7      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4937      	ldr	r1, [pc, #220]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fab1 	bl	8001294 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff faad 	bl	8001294 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a8      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4925      	ldr	r1, [pc, #148]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff fa90 	bl	8001294 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff fa8c 	bl	8001294 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e187      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d036      	beq.n	8001e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d016      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff fa70 	bl	8001294 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff fa6c 	bl	8001294 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e167      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x200>
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa59 	bl	8001294 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e00e      	b.n	8001e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff fa55 	bl	8001294 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d907      	bls.n	8001e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e150      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	42470000 	.word	0x42470000
 8001e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ea      	bne.n	8001de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8097 	beq.w	8001f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b81      	ldr	r3, [pc, #516]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b7d      	ldr	r3, [pc, #500]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a7c      	ldr	r2, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b77      	ldr	r3, [pc, #476]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b74      	ldr	r3, [pc, #464]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a73      	ldr	r2, [pc, #460]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fa15 	bl	8001294 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff fa11 	bl	8001294 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e10c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2ea>
 8001e94:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e98:	4a63      	ldr	r2, [pc, #396]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x30c>
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ec4:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec8:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed0:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0304 	bic.w	r3, r3, #4
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f9d6 	bl	8001294 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f9d2 	bl	8001294 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0cb      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ee      	beq.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f9c0 	bl	8001294 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7ff f9bc 	bl	8001294 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0b5      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ee      	bne.n	8001f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a1 	beq.w	8002098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f56:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d05c      	beq.n	800201c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d141      	bne.n	8001fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f990 	bl	8001294 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f98c 	bl	8001294 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e087      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	491b      	ldr	r1, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f965 	bl	8001294 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f961 	bl	8001294 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e05c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x416>
 8001fec:	e054      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f94e 	bl	8001294 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f94a 	bl	8001294 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e045      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
 800201a:	e03d      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e038      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000
 8002030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4ec>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d028      	beq.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d121      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800206a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800206c:	4293      	cmp	r3, r2
 800206e:	d111      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	3b01      	subs	r3, #1
 800207e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0cc      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b68      	ldr	r3, [pc, #416]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d90c      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b65      	ldr	r3, [pc, #404]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d044      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	2b03      	cmp	r3, #3
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e067      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4934      	ldr	r1, [pc, #208]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7ff f87c 	bl	8001294 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7ff f878 	bl	8001294 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d20c      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221a:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ffdc 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00
 8002264:	40023800 	.word	0x40023800
 8002268:	0800460c 	.word	0x0800460c
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b090      	sub	sp, #64	@ 0x40
 800227a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228c:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d00d      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002298:	2b08      	cmp	r3, #8
 800229a:	f200 80a1 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x34>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x3a>
 80022a6:	e09b      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80022ac:	e09b      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ae:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b2:	e098      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b4:	4b4f      	ldr	r3, [pc, #316]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022be:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	2200      	movs	r2, #0
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022dc:	2100      	movs	r1, #0
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022e0:	fb03 f201 	mul.w	r2, r3, r1
 80022e4:	2300      	movs	r3, #0
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	4a43      	ldr	r2, [pc, #268]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022ee:	fba0 1202 	umull	r1, r2, r0, r2
 80022f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f4:	460a      	mov	r2, r1
 80022f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	2200      	movs	r2, #0
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	61fa      	str	r2, [r7, #28]
 8002306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800230e:	f7fd ff63 	bl	80001d8 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4613      	mov	r3, r2
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231a:	e053      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	2200      	movs	r2, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	617a      	str	r2, [r7, #20]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800232e:	f04f 0b00 	mov.w	fp, #0
 8002332:	4652      	mov	r2, sl
 8002334:	465b      	mov	r3, fp
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	ebb2 080a 	subs.w	r8, r2, sl
 800234e:	eb63 090b 	sbc.w	r9, r3, fp
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800235e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002362:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002366:	ebb2 0408 	subs.w	r4, r2, r8
 800236a:	eb63 0509 	sbc.w	r5, r3, r9
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	00eb      	lsls	r3, r5, #3
 8002378:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237c:	00e2      	lsls	r2, r4, #3
 800237e:	4614      	mov	r4, r2
 8002380:	461d      	mov	r5, r3
 8002382:	eb14 030a 	adds.w	r3, r4, sl
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	eb45 030b 	adc.w	r3, r5, fp
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ae:	2200      	movs	r2, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	f7fd ff0e 	bl	80001d8 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80023d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3740      	adds	r7, #64	@ 0x40
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	017d7840 	.word	0x017d7840

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	0800461c 	.word	0x0800461c

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	0800461c 	.word	0x0800461c

08002468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e041      	b.n	80024fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fcf8 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f000 fc3e 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e041      	b.n	800259c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fbb9 	bl	8000ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f000 fbef 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f839 	bl	8002642 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fba0 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e097      	b.n	800279a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fb38 	bl	8000cf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fb3c 	bl	8002d28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	f023 0303 	bic.w	r3, r3, #3
 80026dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4313      	orrs	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80026f6:	f023 030c 	bic.w	r3, r3, #12
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4313      	orrs	r3, r2
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	011a      	lsls	r2, r3, #4
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	4313      	orrs	r3, r2
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002734:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800273c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4313      	orrs	r3, r2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01b      	beq.n	8002806 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f06f 0202 	mvn.w	r2, #2
 80027d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fa7d 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 80027f2:	e005      	b.n	8002800 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fa6f 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa80 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01b      	beq.n	8002852 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0204 	mvn.w	r2, #4
 8002822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa57 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 800283e:	e005      	b.n	800284c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa49 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa5a 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01b      	beq.n	800289e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f06f 0208 	mvn.w	r2, #8
 800286e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa31 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 800288a:	e005      	b.n	8002898 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa23 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa34 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01b      	beq.n	80028ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f06f 0210 	mvn.w	r2, #16
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2208      	movs	r2, #8
 80028c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fa0b 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 80028d6:	e005      	b.n	80028e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f9fd 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa0e 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00c      	beq.n	800290e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0201 	mvn.w	r2, #1
 8002906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9db 	bl	8002cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00c      	beq.n	8002932 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800292a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 ff0d 	bl	800374c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9df 	bl	8002d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0220 	mvn.w	r2, #32
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fedf 	bl	8003738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800299c:	2302      	movs	r3, #2
 800299e:	e088      	b.n	8002ab2 <HAL_TIM_IC_ConfigChannel+0x130>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11b      	bne.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80029be:	f000 fc5d 	bl	800327c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020c 	bic.w	r2, r2, #12
 80029d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6999      	ldr	r1, [r3, #24]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	619a      	str	r2, [r3, #24]
 80029e4:	e060      	b.n	8002aa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11c      	bne.n	8002a26 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80029fc:	f000 fcd5 	bl	80033aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a0e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	021a      	lsls	r2, r3, #8
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	619a      	str	r2, [r3, #24]
 8002a24:	e040      	b.n	8002aa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002a3c:	f000 fd22 	bl	8003484 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020c 	bic.w	r2, r2, #12
 8002a4e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69d9      	ldr	r1, [r3, #28]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	e021      	b.n	8002aa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d11c      	bne.n	8002aa4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002a7a:	f000 fd3f 	bl	80034fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	61da      	str	r2, [r3, #28]
 8002aa2:	e001      	b.n	8002aa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0ae      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	f200 809f 	bhi.w	8002c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002c29 	.word	0x08002c29
 8002af8:	08002c29 	.word	0x08002c29
 8002afc:	08002c29 	.word	0x08002c29
 8002b00:	08002b65 	.word	0x08002b65
 8002b04:	08002c29 	.word	0x08002c29
 8002b08:	08002c29 	.word	0x08002c29
 8002b0c:	08002c29 	.word	0x08002c29
 8002b10:	08002ba7 	.word	0x08002ba7
 8002b14:	08002c29 	.word	0x08002c29
 8002b18:	08002c29 	.word	0x08002c29
 8002b1c:	08002c29 	.word	0x08002c29
 8002b20:	08002be7 	.word	0x08002be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f988 	bl	8002e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]
      break;
 8002b62:	e064      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f9ce 	bl	8002f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	619a      	str	r2, [r3, #24]
      break;
 8002ba4:	e043      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fa19 	bl	8002fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0208 	orr.w	r2, r2, #8
 8002bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0204 	bic.w	r2, r2, #4
 8002bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69d9      	ldr	r1, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	61da      	str	r2, [r3, #28]
      break;
 8002be4:	e023      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fa63 	bl	80030b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	021a      	lsls	r2, r3, #8
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e031      	b.n	8002cbc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa74 	bl	8003158 <TIM_SlaveTimer_SetConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e018      	b.n	8002cbc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c98:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ca8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e24 <TIM_Base_SetConfig+0xfc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00f      	beq.n	8002d60 <TIM_Base_SetConfig+0x38>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x38>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a37      	ldr	r2, [pc, #220]	@ (8002e28 <TIM_Base_SetConfig+0x100>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x38>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a36      	ldr	r2, [pc, #216]	@ (8002e2c <TIM_Base_SetConfig+0x104>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x38>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a35      	ldr	r2, [pc, #212]	@ (8002e30 <TIM_Base_SetConfig+0x108>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	@ (8002e24 <TIM_Base_SetConfig+0xfc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d80:	d017      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a28      	ldr	r2, [pc, #160]	@ (8002e28 <TIM_Base_SetConfig+0x100>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <TIM_Base_SetConfig+0x104>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <TIM_Base_SetConfig+0x108>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <TIM_Base_SetConfig+0x10c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a24      	ldr	r2, [pc, #144]	@ (8002e38 <TIM_Base_SetConfig+0x110>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x8a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a23      	ldr	r2, [pc, #140]	@ (8002e3c <TIM_Base_SetConfig+0x114>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0e      	ldr	r2, [pc, #56]	@ (8002e24 <TIM_Base_SetConfig+0xfc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]
  }
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800

08002e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 0201 	bic.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 0302 	bic.w	r3, r3, #2
 8002e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	@ (8002f08 <TIM_OC1_SetConfig+0xc8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10c      	bne.n	8002eb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0308 	bic.w	r3, r3, #8
 8002ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <TIM_OC1_SetConfig+0xc8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d111      	bne.n	8002ee2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40010000 	.word	0x40010000

08002f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f023 0210 	bic.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0320 	bic.w	r3, r3, #32
 8002f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <TIM_OC2_SetConfig+0xd4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10d      	bne.n	8002f88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <TIM_OC2_SetConfig+0xd4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d113      	bne.n	8002fb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	621a      	str	r2, [r3, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000

08002fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <TIM_OC3_SetConfig+0xd0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800305c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <TIM_OC3_SetConfig+0xd0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d113      	bne.n	800308e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40010000 	.word	0x40010000

080030b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	031b      	lsls	r3, r3, #12
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a10      	ldr	r2, [pc, #64]	@ (8003154 <TIM_OC4_SetConfig+0x9c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d109      	bne.n	800312c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800311e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40010000 	.word	0x40010000

08003158 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003174:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b70      	cmp	r3, #112	@ 0x70
 80031a0:	d01a      	beq.n	80031d8 <TIM_SlaveTimer_SetConfig+0x80>
 80031a2:	2b70      	cmp	r3, #112	@ 0x70
 80031a4:	d860      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031a6:	2b60      	cmp	r3, #96	@ 0x60
 80031a8:	d054      	beq.n	8003254 <TIM_SlaveTimer_SetConfig+0xfc>
 80031aa:	2b60      	cmp	r3, #96	@ 0x60
 80031ac:	d85c      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031ae:	2b50      	cmp	r3, #80	@ 0x50
 80031b0:	d046      	beq.n	8003240 <TIM_SlaveTimer_SetConfig+0xe8>
 80031b2:	2b50      	cmp	r3, #80	@ 0x50
 80031b4:	d858      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d019      	beq.n	80031ee <TIM_SlaveTimer_SetConfig+0x96>
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d854      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031be:	2b30      	cmp	r3, #48	@ 0x30
 80031c0:	d055      	beq.n	800326e <TIM_SlaveTimer_SetConfig+0x116>
 80031c2:	2b30      	cmp	r3, #48	@ 0x30
 80031c4:	d850      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d051      	beq.n	800326e <TIM_SlaveTimer_SetConfig+0x116>
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d84c      	bhi.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d04d      	beq.n	800326e <TIM_SlaveTimer_SetConfig+0x116>
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d04b      	beq.n	800326e <TIM_SlaveTimer_SetConfig+0x116>
 80031d6:	e047      	b.n	8003268 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80031e8:	f000 f9c5 	bl	8003576 <TIM_ETR_SetConfig>
      break;
 80031ec:	e040      	b.n	8003270 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d101      	bne.n	80031fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e03b      	b.n	8003272 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003220:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4313      	orrs	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]
      break;
 800323e:	e017      	b.n	8003270 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324c:	461a      	mov	r2, r3
 800324e:	f000 f87d 	bl	800334c <TIM_TI1_ConfigInputStage>
      break;
 8003252:	e00d      	b.n	8003270 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003260:	461a      	mov	r2, r3
 8003262:	f000 f8df 	bl	8003424 <TIM_TI2_ConfigInputStage>
      break;
 8003266:	e003      	b.n	8003270 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	e000      	b.n	8003270 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800326e:	bf00      	nop
  }

  return status;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f023 0201 	bic.w	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a24      	ldr	r2, [pc, #144]	@ (8003338 <TIM_TI1_SetConfig+0xbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b0:	d00f      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a21      	ldr	r2, [pc, #132]	@ (800333c <TIM_TI1_SetConfig+0xc0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a20      	ldr	r2, [pc, #128]	@ (8003340 <TIM_TI1_SetConfig+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <TIM_TI1_SetConfig+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <TIM_TI1_SetConfig+0xcc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <TIM_TI1_SetConfig+0x5a>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <TIM_TI1_SetConfig+0x5c>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e003      	b.n	80032f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 030a 	and.w	r3, r3, #10
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 0201 	bic.w	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 030a 	bic.w	r3, r3, #10
 8003388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0210 	bic.w	r2, r3, #16
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	031b      	lsls	r3, r3, #12
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0210 	bic.w	r2, r3, #16
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	031b      	lsls	r3, r3, #12
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 0303 	bic.w	r3, r3, #3
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80034d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	621a      	str	r2, [r3, #32]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	b29b      	uxth	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800354e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	021a      	lsls	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4313      	orrs	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e050      	b.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800361c:	d013      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a15      	ldr	r2, [pc, #84]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10c      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40014000 	.word	0x40014000

08003694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e03d      	b.n	800372c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e042      	b.n	80037f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fc06 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fc85 	bl	80040b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0ba      	sub	sp, #232	@ 0xe8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800383e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fb69 	bl	8003f36 <UART_Receive_IT>
      return;
 8003864:	e25b      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80de 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
 8003870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80d1 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f043 0202 	orr.w	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 81f2 	beq.w	8003d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 faf4 	bl	8003f36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_UART_IRQHandler+0x17a>
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9fc 	bl	8003d78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d141      	bne.n	8003a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	4a7e      	ldr	r2, [pc, #504]	@ (8003be0 <HAL_UART_IRQHandler+0x3e0>)
 80039e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fddd 	bl	80015ae <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00e      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f99e 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00a      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f99a 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e006      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f996 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a26:	e175      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	bf00      	nop
    return;
 8003a2a:	e173      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 814f 	bne.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8148 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8141 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b40      	cmp	r3, #64	@ 0x40
 8003a74:	f040 80b6 	bne.w	8003be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8145 	beq.w	8003d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f080 813e 	bcs.w	8003d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aae:	f000 8088 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ade:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e1      	bne.n	8003afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e3      	bne.n	8003b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ba4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e3      	bne.n	8003b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fc86 	bl	80014ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8c1 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bde:	e09b      	b.n	8003d18 <HAL_UART_IRQHandler+0x518>
 8003be0:	08003e3f 	.word	0x08003e3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 808e 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8089 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	623b      	str	r3, [r7, #32]
   return(result);
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e3      	bne.n	8003c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f847 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd2:	e023      	b.n	8003d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8ba 	bl	8003e66 <UART_Transmit_IT>
    return;
 8003cf2:	e014      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8fa 	bl	8003f06 <UART_EndTransmit_IT>
    return;
 8003d12:	e004      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d1c:	bf00      	nop
  }
}
 8003d1e:	37e8      	adds	r7, #232	@ 0xe8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b095      	sub	sp, #84	@ 0x54
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003da0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d119      	bne.n	8003e24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f023 0310 	bic.w	r3, r3, #16
 8003e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e10:	61ba      	str	r2, [r7, #24]
 8003e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6979      	ldr	r1, [r7, #20]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e32:	bf00      	nop
 8003e34:	3754      	adds	r7, #84	@ 0x54
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff77 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b21      	cmp	r3, #33	@ 0x21
 8003e78:	d13e      	bne.n	8003ef8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e82:	d114      	bne.n	8003eae <UART_Transmit_IT+0x48>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d110      	bne.n	8003eae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	621a      	str	r2, [r3, #32]
 8003eac:	e008      	b.n	8003ec0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6211      	str	r1, [r2, #32]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10f      	bne.n	8003ef4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fefc 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08c      	sub	sp, #48	@ 0x30
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b22      	cmp	r3, #34	@ 0x22
 8003f48:	f040 80ae 	bne.w	80040a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f54:	d117      	bne.n	8003f86 <UART_Receive_IT+0x50>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d113      	bne.n	8003f86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f84:	e026      	b.n	8003fd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d007      	beq.n	8003faa <UART_Receive_IT+0x74>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <UART_Receive_IT+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e008      	b.n	8003fca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d15d      	bne.n	80040a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0220 	bic.w	r2, r2, #32
 8003ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	2b01      	cmp	r3, #1
 800402c:	d135      	bne.n	800409a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	613b      	str	r3, [r7, #16]
   return(result);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004054:	623a      	str	r2, [r7, #32]
 8004056:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69f9      	ldr	r1, [r7, #28]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	61bb      	str	r3, [r7, #24]
   return(result);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d10a      	bne.n	800408c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fe64 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
 8004098:	e002      	b.n	80040a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe4c 	bl	8003d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e002      	b.n	80040aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3730      	adds	r7, #48	@ 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b0c0      	sub	sp, #256	@ 0x100
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	68d9      	ldr	r1, [r3, #12]
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	ea40 0301 	orr.w	r3, r0, r1
 80040dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800410c:	f021 010c 	bic.w	r1, r1, #12
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800411a:	430b      	orrs	r3, r1
 800411c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412e:	6999      	ldr	r1, [r3, #24]
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	ea40 0301 	orr.w	r3, r0, r1
 800413a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b8f      	ldr	r3, [pc, #572]	@ (8004380 <UART_SetConfig+0x2cc>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d005      	beq.n	8004154 <UART_SetConfig+0xa0>
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b8d      	ldr	r3, [pc, #564]	@ (8004384 <UART_SetConfig+0x2d0>)
 8004150:	429a      	cmp	r2, r3
 8004152:	d104      	bne.n	800415e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7fe f974 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8004158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800415c:	e003      	b.n	8004166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800415e:	f7fe f95b 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8004162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004170:	f040 810c 	bne.w	800438c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800417e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004186:	4622      	mov	r2, r4
 8004188:	462b      	mov	r3, r5
 800418a:	1891      	adds	r1, r2, r2
 800418c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800418e:	415b      	adcs	r3, r3
 8004190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004196:	4621      	mov	r1, r4
 8004198:	eb12 0801 	adds.w	r8, r2, r1
 800419c:	4629      	mov	r1, r5
 800419e:	eb43 0901 	adc.w	r9, r3, r1
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	eb18 0303 	adds.w	r3, r8, r3
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c4:	462b      	mov	r3, r5
 80041c6:	eb49 0303 	adc.w	r3, r9, r3
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041e2:	460b      	mov	r3, r1
 80041e4:	18db      	adds	r3, r3, r3
 80041e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e8:	4613      	mov	r3, r2
 80041ea:	eb42 0303 	adc.w	r3, r2, r3
 80041ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041f8:	f7fb ffee 	bl	80001d8 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4b61      	ldr	r3, [pc, #388]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004202:	fba3 2302 	umull	r2, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	011c      	lsls	r4, r3, #4
 800420a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	1891      	adds	r1, r2, r2
 8004222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004224:	415b      	adcs	r3, r3
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800422c:	4641      	mov	r1, r8
 800422e:	eb12 0a01 	adds.w	sl, r2, r1
 8004232:	4649      	mov	r1, r9
 8004234:	eb43 0b01 	adc.w	fp, r3, r1
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424c:	4692      	mov	sl, r2
 800424e:	469b      	mov	fp, r3
 8004250:	4643      	mov	r3, r8
 8004252:	eb1a 0303 	adds.w	r3, sl, r3
 8004256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800425a:	464b      	mov	r3, r9
 800425c:	eb4b 0303 	adc.w	r3, fp, r3
 8004260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004278:	460b      	mov	r3, r1
 800427a:	18db      	adds	r3, r3, r3
 800427c:	643b      	str	r3, [r7, #64]	@ 0x40
 800427e:	4613      	mov	r3, r2
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800428a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800428e:	f7fb ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4611      	mov	r1, r2
 8004298:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <UART_SetConfig+0x2d4>)
 800429a:	fba3 2301 	umull	r2, r3, r3, r1
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2264      	movs	r2, #100	@ 0x64
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	1acb      	subs	r3, r1, r3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042ae:	4b36      	ldr	r3, [pc, #216]	@ (8004388 <UART_SetConfig+0x2d4>)
 80042b0:	fba3 2302 	umull	r2, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042bc:	441c      	add	r4, r3
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042d8:	415b      	adcs	r3, r3
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800432c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004334:	460b      	mov	r3, r1
 8004336:	18db      	adds	r3, r3, r3
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433a:	4613      	mov	r3, r2
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800434a:	f7fb ff45 	bl	80001d8 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	@ 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	3332      	adds	r3, #50	@ 0x32
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 0207 	and.w	r2, r3, #7
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4422      	add	r2, r4
 800437a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800437c:	e106      	b.n	800458c <UART_SetConfig+0x4d8>
 800437e:	bf00      	nop
 8004380:	40011000 	.word	0x40011000
 8004384:	40011400 	.word	0x40011400
 8004388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800439a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800439e:	4642      	mov	r2, r8
 80043a0:	464b      	mov	r3, r9
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	6239      	str	r1, [r7, #32]
 80043a6:	415b      	adcs	r3, r3
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ae:	4641      	mov	r1, r8
 80043b0:	1854      	adds	r4, r2, r1
 80043b2:	4649      	mov	r1, r9
 80043b4:	eb43 0501 	adc.w	r5, r3, r1
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	00eb      	lsls	r3, r5, #3
 80043c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c6:	00e2      	lsls	r2, r4, #3
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	4643      	mov	r3, r8
 80043ce:	18e3      	adds	r3, r4, r3
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d4:	464b      	mov	r3, r9
 80043d6:	eb45 0303 	adc.w	r3, r5, r3
 80043da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043fa:	4629      	mov	r1, r5
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004404:	4621      	mov	r1, r4
 8004406:	008a      	lsls	r2, r1, #2
 8004408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800440c:	f7fb fee4 	bl	80001d8 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4b60      	ldr	r3, [pc, #384]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004416:	fba3 2302 	umull	r2, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	011c      	lsls	r4, r3, #4
 800441e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800442c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	1891      	adds	r1, r2, r2
 8004436:	61b9      	str	r1, [r7, #24]
 8004438:	415b      	adcs	r3, r3
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004440:	4641      	mov	r1, r8
 8004442:	1851      	adds	r1, r2, r1
 8004444:	6139      	str	r1, [r7, #16]
 8004446:	4649      	mov	r1, r9
 8004448:	414b      	adcs	r3, r1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004458:	4659      	mov	r1, fp
 800445a:	00cb      	lsls	r3, r1, #3
 800445c:	4651      	mov	r1, sl
 800445e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004462:	4651      	mov	r1, sl
 8004464:	00ca      	lsls	r2, r1, #3
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	4603      	mov	r3, r0
 800446c:	4642      	mov	r2, r8
 800446e:	189b      	adds	r3, r3, r2
 8004470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004474:	464b      	mov	r3, r9
 8004476:	460a      	mov	r2, r1
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004498:	4649      	mov	r1, r9
 800449a:	008b      	lsls	r3, r1, #2
 800449c:	4641      	mov	r1, r8
 800449e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a2:	4641      	mov	r1, r8
 80044a4:	008a      	lsls	r2, r1, #2
 80044a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044aa:	f7fb fe95 	bl	80001d8 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <UART_SetConfig+0x4e4>)
 80044b6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2264      	movs	r2, #100	@ 0x64
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	1acb      	subs	r3, r1, r3
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	3332      	adds	r3, #50	@ 0x32
 80044c8:	4a33      	ldr	r2, [pc, #204]	@ (8004598 <UART_SetConfig+0x4e4>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d4:	441c      	add	r4, r3
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80044de:	677a      	str	r2, [r7, #116]	@ 0x74
 80044e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004526:	464b      	mov	r3, r9
 8004528:	460a      	mov	r2, r1
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	663b      	str	r3, [r7, #96]	@ 0x60
 800453a:	667a      	str	r2, [r7, #100]	@ 0x64
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004548:	4649      	mov	r1, r9
 800454a:	008b      	lsls	r3, r1, #2
 800454c:	4641      	mov	r1, r8
 800454e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004552:	4641      	mov	r1, r8
 8004554:	008a      	lsls	r2, r1, #2
 8004556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800455a:	f7fb fe3d 	bl	80001d8 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004564:	fba3 1302 	umull	r1, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	2164      	movs	r1, #100	@ 0x64
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	3332      	adds	r3, #50	@ 0x32
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4422      	add	r2, r4
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004598:	51eb851f 	.word	0x51eb851f

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <__libc_init_array>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	4d0d      	ldr	r5, [pc, #52]	@ (80045e4 <__libc_init_array+0x38>)
 80045b0:	4c0d      	ldr	r4, [pc, #52]	@ (80045e8 <__libc_init_array+0x3c>)
 80045b2:	1b64      	subs	r4, r4, r5
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	2600      	movs	r6, #0
 80045b8:	42a6      	cmp	r6, r4
 80045ba:	d109      	bne.n	80045d0 <__libc_init_array+0x24>
 80045bc:	4d0b      	ldr	r5, [pc, #44]	@ (80045ec <__libc_init_array+0x40>)
 80045be:	4c0c      	ldr	r4, [pc, #48]	@ (80045f0 <__libc_init_array+0x44>)
 80045c0:	f000 f818 	bl	80045f4 <_init>
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	2600      	movs	r6, #0
 80045ca:	42a6      	cmp	r6, r4
 80045cc:	d105      	bne.n	80045da <__libc_init_array+0x2e>
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d4:	4798      	blx	r3
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7ee      	b.n	80045b8 <__libc_init_array+0xc>
 80045da:	f855 3b04 	ldr.w	r3, [r5], #4
 80045de:	4798      	blx	r3
 80045e0:	3601      	adds	r6, #1
 80045e2:	e7f2      	b.n	80045ca <__libc_init_array+0x1e>
 80045e4:	0800462c 	.word	0x0800462c
 80045e8:	0800462c 	.word	0x0800462c
 80045ec:	0800462c 	.word	0x0800462c
 80045f0:	08004630 	.word	0x08004630

080045f4 <_init>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr

08004600 <_fini>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr
